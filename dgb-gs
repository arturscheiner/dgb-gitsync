#!/bin/bash

# Project: Digibee Git Sync
HASH_VERSION=$(shasum $(echo $0) | awk '{print substr($1,0,5)}')
VERSION="v0.1.0.$HASH_VERSION"
# Written by: Artur Scheiner
# Email: artur.scheiner@gmail.com

############################################################
# Init                                                     #
############################################################
isLocal()[[ $0 == ./* ]]

THIS=$(echo $0 | awk -F'/' '{print $(NF)}')
CONFIG_FILE=~/.digibeectl/config.json
DGB_GS_DIR=~/.$THIS
USER_PATHS=$(echo ${PATH//:/ })

isLocal && THIS_TYPE="$0" || THIS_TYPE="$THIS"

Init()
{
    mkdir -p $DGB_GS_DIR

    if [ ! -z "$(ls -A $DGB_GS_DIR)" ]; then
        chmod 444 $DGB_GS_DIR/*
    fi 
}

gitSync()
{
PIPE_NAME=$1
BASE_PATH=$HOME/.dgb-gs
mkdir -p $BASE_PATH/$PIPE_NAME

PIPE_PATH="$BASE_PATH/$PIPE_NAME"
PIPE_JSON="$PIPE_PATH/flowspec.json"
PIPE_LINE=$(digibeectl get pipeline -n $PIPE_NAME | awk 'NR==2')

IFS=" " read -r -a PIPE_INFO <<< "$PIPE_LINE"

PIPE_ID=${PIPE_INFO[1]}
PIPE_VERSION=${PIPE_INFO[2]}
PIPE_CHECKSUM=$(cat $PIPE_PATH/version.json | jq -r '.checksum')

echo "Sync - $PIPE_NAME"
echo "Pipeline ID - $PIPE_ID"
echo "Pipeline Version = $PIPE_VERSION"
echo "File output - $PIPE_JSON"
echo "Previous Checksum - $PIPE_CHECKSUM"

digibeectl get pipeline --pipeline-id $PIPE_ID --flowspec | jq > $PIPE_JSON 

#New Checksumm
PIPE_CHECKSUM=$(shasum $PIPE_JSON | awk '{print $1}' | awk '{print substr($0,0,5)}')

cat <<EOT > $PIPE_PATH/version.json
{
  "name" : "$PIPE_NAME",
  "id" : "$PIPE_ID",
  "version" : "$PIPE_VERSION",
  "checksum" : "$PIPE_CHECKSUM"
}
EOT

cd $PIPE_PATH
git add .
git commit -m "Version $PIPE_VERSION.$PIPE_CHECKSUM"
git push
}

############################################################
# Functions                                                #
############################################################
Help()
{
    Title "Help Information"
    printf "Syntax: $(TT bold)$THIS_TYPE [-a|l|r|s|u|c|d|h] params$(TT normal)\n\n"
    printf "$(TT yellow)about pipeline stuff$(TT white)\n"
    printf "a\tAdd a new pipeline to the switch list\n\tE.g. -> $(TT green)$THIS_TYPE -a$(TT white)\n\n"
    printf "l\tList all the pipelines configured\n\tE.g. -> $(TT green)$THIS_TYPE -l$(TT white)\n\n"
    printf "r\tRemove a pipeline from the switch list\n\tE.g. -> $(TT green)$THIS_TYPE -r $(TT underline)pipeline-name$(TT normal; TT white)\n\n"
    printf "s\tSync a pipeline with a git repo\n\tE.g. -> $(TT green)$THIS_TYPE -s $(TT underline)pipeline-name$(TT normal; TT white)\n\n"
    printf "u\tUnset the active pipeline\n\tE.g. -> $(TT green)$THIS_TYPE -u$(TT normal; TT white)\n\n"
   
   printf "$(TT yellow)about this script$(TT white)\n"
   printf "c\tCheck this script deployment\n\tE.g. -> $(TT green)$THIS_TYPE -c$(TT white)\n\n"
    if [[ $0 == ./* ]]; then    
        printf "d\tDeploy this script into a directory\n\tE.g. -> $(TT green)sudo $THIS_TYPE -d /usr/local/bin$(TT white)\n\n"
    fi

    printf "$(TT yellow)about anything else$(TT white)\n"  
    printf "h\tShow this help information\n\tE.g. -> $(TT green)$THIS_TYPE -h$(TT white)\n\n"
}

TT()
{
    FORMAT=$1

    case $FORMAT in
        bold)
            tput bold
            ;;
        underline)
            tput smul
            ;;
        standout)
            tput smso
            ;;
        normal)
            tput sgr0
            ;;
        red)
            tput setaf 1
            ;;
        green)
            tput setaf 2
            ;;
        yellow)
            tput setaf 3
            ;;
        blue)
            tput setaf 4
            ;;
        magenta)
            tput setaf 5
            ;;
        cyan)
            tput setaf 6
            ;;
        white)
            tput setaf 7
            ;;
        *)
            tput sgr0
            ;;
    esac
}

callForHelp(){ 
    printf "Check the help by running:\n\n\t$(TT green; TT bold)$THIS_TYPE -h$(TT normal)\n\n"
}

Error()
{
    MESSAGE=$1
    printf "$(TT red; TT bold)ERROR: $(TT white; TT normal)$MESSAGE\n\n"
}

Warning()
{
    MESSAGE=$1
    printf "$(TT yellow; TT bold)WARNING: $(TT white; TT normal)$MESSAGE\n\n"
}

Title()
{
    MESSAGE=$1
    [ -z $2 ] && COLOR="green" || COLOR=$2
    printf "$(TT $COLOR; TT bold)$MESSAGE$(TT normal; TT white)\n\n"
}

Check()
{
    Title "Check this script deployment and its dependencies"
    Title "about dependencies" white
    CheckDigibeeCtl
    CheckGit
    printf "\n"
    Title "about this script" white
    CheckThisScript
    printf "\n"
}

CheckThisScript()
{
  TRY_FIND=$(which $THIS)

    if [ -z $TRY_FIND ]
    then
        printf "$(TT red; TT bold)\xE2\x9C\x97$(TT white; TT normal) This script is not deployed on a PATH.\n" 
        printf "$(TT blue; TT bold)\xE2\x87\xB2$(TT white; TT normal) These are the available PATHS configured for this profile:\n"
        

        
        for p in $(echo $USER_PATHS); 
        do
            [ $p = "/usr/local/bin" ] && printf "  $(TT blue; TT bold)$p$(TT white; TT normal)\n" || printf "  $p\n"
        done
        
        printf "\n"
        printf "$(TT blue; TT bold)\xE2\x87\xB2$(TT white; TT normal) Deploy it using the recommended command from the current directory:\n\n"
        printf "  $(TT green; TT bold)sudo $0 -d /usr/local/bin$(TT white; TT normal)\n"
    else
        # printf "Seems that this script is already deployed on this system!\n"
        # printf "Check it out where it is deployed:\n\n"
        # printf "  $(TT blue; TT bold)$TRY_FIND$(TT white; TT normal)\n\n"
        CheckThisScriptVersion
    fi 
}

CheckThisScriptVersion()
{
  TRY_FIND=$(which $THIS)
  DEPLOYED=$(shasum $(which $THIS) | awk '{print $1}')
  ACTUAL=$(shasum $(echo $0) | awk '{print $1}')

  if [ $DEPLOYED = $ACTUAL ]
  then
    printf "$(TT green; TT bold)\xE2\x9C\x94$(TT white; TT normal) This script is already installed on your system: $(TT blue; TT bold)$TRY_FIND$(TT white; TT normal)\n"
  else
    printf "$(TT yellow; TT bold)\xE2\x8F\xB6$(TT white; TT normal) This script is different than the version installed: $(TT green; TT bold)sudo $0 -d /usr/local/bin$(TT white; TT normal)\n"    
  fi
}

CheckDigibeeCtl()
{
  TRY_DIGIBEECTL=$(which digibeectl)

  if [ -z $TRY_DIGIBEECTL ]
  then
    printf "$(TT yellow; TT bold)\u23f6$(TT white; TT normal) Git is not installed on your system: https://docs.digibee.com/documentation/platform/digibeectl\n"
  else
    printf "$(TT green; TT bold)\xE2\x9C\x94$(TT white; TT normal) Digibeectl is installed on your system: $(TT blue; TT bold)$TRY_DIGIBEECTL$(TT white; TT normal)\n"
    CheckDigibeeCtlConfig
  fi
}

CheckDigibeeCtlConfig()
{
  DGBCTLCONFIG=~/.digibeectl/config.json
  if [ -f $DGBCTLCONFIG ]
  then 
    printf "$(TT green; TT bold)\xE2\x9C\x94$(TT white; TT normal) Digibeectl is configured on your system: $(TT blue; TT bold)$DGBCTLCONFIG$(TT white; TT normal)\n"
  else
    printf "$(TT red; TT bold)\xE2\x9C\x97$(TT white; TT normal) Digibeectl is not configured on your system.\n"
  fi
}

CheckGit()
{
  TRY_GIT=$(which git)

  if [ -z $TRY_GIT ]
  then
    printf "$(TT yellow; TT bold)\u23f6$(TT white; TT normal) Git is not installed on your system.\n"
  else
    printf "$(TT green; TT bold)\xE2\x9C\x94$(TT white; TT normal) Git is installed on your system: $(TT blue; TT bold)$TRY_GIT$(TT white; TT normal)\n"
  fi
}

Deploy()
{
    Title "Deploy this script to a directory"
    echo "Sugested path is /usr/local/bin"

    echo $0
    TO_PATH=$1

    chmod +x $0

    if [ -f $TO_PATH/$THIS ]; then
        sudo rm $TO_PATH/$THIS
    fi

    sudo cp $0 $TO_PATH
}

############################################################
# Main program                                             #
############################################################

############################################################
# Init program                                             #
############################################################
Init

############################################################
# Process the input options.                               #
############################################################
# Get the options
printf "$(TT magenta)Digibee$(TT white) Git Sync $VERSION\n\n"

OPTERR=0
OPTION=$1

isLocal && OPTIONS="hlcaus:r:d:" || OPTIONS="hlaus:r:"

while getopts $OPTIONS option; do
   case $option in
      a) # config
         Add
         exit;;
      h) # display Help
         Help
         exit;;
      s) # set active pipeline
         gitSync $OPTARG
         exit;;
      d) # deploy script to the /usr/local/bin
        Check
        Deploy $OPTARG
         exit;;
      l) # list script
         List
         exit;;
      r) # list script
         Remove $OPTARG
         exit;;
      u) # unset active pipeline
         Unset
         echo
         exit;;
    c) # unset active pipeline
        Check
        exit;;
     \?) # Invalid option
        Error "invalid option $OPTION or option without required config"
        callForHelp
        exit;;
   esac
done

if [[ -z $1 ]]; then
    Error "no option defined"
    callForHelp
fi