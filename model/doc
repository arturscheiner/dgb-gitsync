#!/bin/bash

subTreeBlock=("block-execution-connector" "for-each-connector" "retry-connector" "do-while-connector")
subTreeChoice=("choice")
subTreeParallel=("parallel-execution-connector")

getFlow()
{   
    local ROOT=$1
    local LEVEL=$3
    local is=0
    local NSO=$(cat $FLOWSPEC | jq --arg root "$ROOT" '.[$root] | length')
    local ie=$((NSO-1))      
    local i
    local n
    for ((i=is;i<=ie;i++)); do
        if [[ $i -gt 9 ]]; then mi=9; else mi=$i; fi
        n=$i$2
        mni=$mi$2
        local ID=$(cat $FLOWSPEC | jq --arg root "$ROOT" --argjson idx $i '.[$root][$idx] | .id' | jq -r)
        local STEPNAME=$(cat $FLOWSPEC | jq --arg root "$ROOT" --argjson idx $i '.[$root][$idx] | .stepName' | jq -r)
        local NAME=$(cat $FLOWSPEC | jq --arg root "$ROOT" --argjson idx $i '.[$root][$idx] | .name' | jq -r)
        local TYPE=$(cat $FLOWSPEC | jq --arg root "$ROOT" --argjson idx $i '.[$root][$idx] | .type' | jq -r)
        local l=${#mni}
        #echo $n $STEPNAME
        local COMPLEMENT
        [[ $NAME == null ]] && COMPLEMENT=$TYPE || COMPLEMENT=$NAME
        #echo $LEVEL
        case $LEVEL in
            choice)
                formatInfo "normal" "$STEPNAME ($COMPLEMENT)" $((l+2))
                ;;
            sub)
                formatInfo "normal" "$STEPNAME ($COMPLEMENT)" $((l+1))
                ;;
            *)
                formatInfo "normal" "$STEPNAME ($COMPLEMENT)" $l
                ;;
        esac

        if checkBlock $NAME; then
            formatInfo "onprocess" "onProcess" $l          
            local ONPROCESS=$(cat $FLOWSPEC | jq --arg root "$ROOT" --argjson idx $i '.[$root][$idx] | .params.onProcess' | jq -r)
            getFlow $ONPROCESS $n sub
            formatInfo "onexception" "onException" $l
            local ONEXCEPTION=$(cat $FLOWSPEC | jq --arg root "$ROOT" --argjson idx $i '.[$root][$idx] | .params.onException' | jq -r)
            getFlow $ONEXCEPTION $n sub       
        fi

        if checkChoice $TYPE; then
                local WHEN_LEN=$(cat $FLOWSPEC | jq --arg root "$ROOT" --argjson idx $i '.[$root][$idx] | .when | length')
                local WHEN=$(cat $FLOWSPEC | jq --arg root "$ROOT" --argjson idx $i '.[$root][$idx] | .when' | jq -c)
                local OTHERWISE=$(cat $FLOWSPEC | jq --arg root "$ROOT" --argjson idx $i '.[$root][$idx] | .otherwise' | jq -r) 
                processChoice $WHEN_LEN "$WHEN" $n
                formatInfo "otherwise" "$OTHERWISE" $l
                getFlow "$OTHERWISE" $n choice                    
        fi
        
        if checkParallel $NAME; then           
                local PARA_LEN=$(cat $FLOWSPEC | jq --arg root "$ROOT" --argjson idx $i '.[$root][$idx] | .params.parallelExecutions' | jq -r | jq '. | length' )
                local EXECS=$(cat $FLOWSPEC | jq --arg root "$ROOT" --argjson idx $i '.[$root][$idx] | .params.parallelExecutions' | jq -r)
                echo "$EXECS" > $DGB_GS_CACHE/$ID-EXECUTIONS.json
                processParallel $PARA_LEN $ID $n
                rm $DGB_GS_CACHE/$ID-EXECUTIONS.json
        fi    
    done

}

formatInfoC()
{
    local TYPE=$1
    local INFO=$2
    local POSITION=$3
    

    case $TYPE in
        onprocess)
            printf "$(TT bold; TT green)"; for (( c=1; c<=POSITION; c++)) ; do printf "  " ; done; printf "     │└──>$(TT normal) onProcess\n"
            ;;
        onexception)
            printf "$(TT bold; TT red)"; for (( c=1; c<=POSITION; c++)) ; do printf "  " ; done; printf "     │└──>$(TT normal) onException\n"
            ;;
        execution)
             printf "$(TT bold; TT cyan)"; for (( c=1; c<=POSITION; c++)) ; do printf "  " ; done; printf "     │└──\xce\x9e$(TT normal) parallel $INFO\n"
            ;;
        condition)
            for (( c=1; c<=POSITION; c++)) ; do printf "\xe2\x80\x94" ; done; printf "xxxxx\xe2\x80\x94| $INFO\n"
            ;;
        when)
            POSITION=$((POSITION+1))
             printf "$(TT bold; TT orange)"; for (( c=1; c<=POSITION; c++)) ; do printf "  " ; done; printf "     │└──)$(TT normal) when: $INFO\n"
            ;;
        otherwise)
            POSITION=$((POSITION+1))
            printf "$(TT bold; TT orange)"; for (( c=1; c<=POSITION; c++)) ; do printf "  " ; done; printf "     │└──*$(TT normal) otherwise: $INFO\n"
            ;;
        *)
            for (( c=1; c<=POSITION; c++)) ; do printf "  " ; done; printf " ├── $INFO\n"
            ;;
    esac
}

formatInfo()
{
    local TYPE=$1
    local INFO=$2
    local POSITION=$3
    

    case $TYPE in
        onprocess)
            for (( c=1; c<=POSITION; c++)) ; do printf "  " ; done; printf "     │└──> onProcess\n"
            ;;
        onexception)
            for (( c=1; c<=POSITION; c++)) ; do printf "  " ; done; printf "     │└──> onException\n"
            ;;
        execution)
            for (( c=1; c<=POSITION; c++)) ; do printf "  " ; done; printf "     │└──\xce\x9e parallel $INFO\n"
            ;;
        condition)
            for (( c=1; c<=POSITION; c++)) ; do printf "\xe2\x80\x94" ; done; printf "xxxxx\xe2\x80\x94| $INFO\n"
            ;;
        when)
            POSITION=$((POSITION+1))
            for (( c=1; c<=POSITION; c++)) ; do printf "  " ; done; printf "     │└──) when: $INFO\n"
            ;;
        otherwise)
            POSITION=$((POSITION+1))
            for (( c=1; c<=POSITION; c++)) ; do printf "  " ; done; printf "     │└──* otherwise: $INFO\n"
            ;;
        *)
            for (( c=1; c<=POSITION; c++)) ; do printf "  " ; done; printf " ├── $INFO\n"
            ;;
    esac
}

checkBlock()
{
    if [[ " ${subTreeBlock[*]} " =~ " ${1} " ]] || echo "$1" | grep -qw "stream"; then
        true
    else
        false
    fi
}

checkChoice()
{
    if [[ " ${subTreeChoice[*]} " =~ " ${1} " ]]; then
        true
    else
        false
    fi
}

checkParallel()
{
    if [[ " ${subTreeParallel[*]} " =~ " ${1} " ]]; then
        true
    else
        false
    fi
}

processParallel()
{
    #echo "$@"
    local LEN=$1
    local ID=$2
    local PEXECUTIONS=$DGB_GS_CACHE/$ID-EXECUTIONS.json
    local n=$3
    local i
    for ((i=0;i<=LEN;i++)); do
      #echo "*** $PEXECUTIONS" 
      if [ $i != $LEN ]; then
        local DESCRIPTION=$(jq -r --argjson idx $i '.[$idx] | .description' $PEXECUTIONS)
        #local DESCRIPTION=$(jq -r --argjson idx $i '.[$idx] | .description' $PEXECUTIONS)
        local EXECUTIONID=$(jq -r --argjson idx $i '.[$idx] | .executionId' $PEXECUTIONS)
        #local EXECUTIONID=$(echo $PEXECUTIONS | jq --argjson idx $i '.[$idx] | .executionId' | jq -r)
        local TARGET=$(jq -r --argjson idx $i '.[$idx] | .target' $PEXECUTIONS)
        #local TARGET=$(echo $PEXECUTIONS | jq --argjson idx $i '.[$idx] | .target' | jq -r)
        #NAME=$(cat $FLOWSPEC | jq --arg sf "$SUBFLOW" --argjson idx $i '.[$sf][$idx] | .name' | jq -r)
        formatInfo "execution" "$EXECUTIONID" $l
        getFlow $TARGET $n sub
      fi
    done
}

processChoice()
{
    local WHEN_LEN=$1
    local WHEN=$2
    local n=$3
    local i
    for ((i=0;i<=WHEN_LEN;i++)); do
      if [ $i != $WHEN_LEN ]; then
        local TARGET=$(echo $WHEN | jq --argjson idx $i '.[$idx] | .target' | jq -r)
        formatInfo "when" "$TARGET" $l
        getFlow "$TARGET" $n choice
      fi 
    done
}